name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [[ -n "$PREV_TAG" ]]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

          echo "## Full Changelog" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ steps.get_version.outputs.version }}" >> CHANGELOG.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  # Build and upload release assets
  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary
        run: |
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            strip target/${{ matrix.target }}/release/open-with
          else
            strip target/${{ matrix.target }}/release/open-with
          fi

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz open-with

      - name: Generate checksums
        run: |
          cd target/${{ matrix.target }}/release
          sha256sum open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz > open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256
          asset_name: open-with-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256
          asset_content_type: text/plain

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --dry-run && cargo publish

  # Update package managers
  update-package-managers:
    name: Update Package Managers
    runs-on: ubuntu-latest
    needs: [create-release, publish-crates]
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-')
    steps:
      - name: Update Homebrew Formula
        if: false # Enable when ready to submit to Homebrew
        run: |
          # TODO: Submit to Homebrew tap
          echo "Would update Homebrew formula here"

      - name: Update AUR Package
        if: false # Enable when ready to submit to AUR
        run: |
          # TODO: Submit to Arch User Repository
          echo "Would update AUR package here"

  # Post-release notifications
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release, publish-crates]
    if: always()
    steps:
      - name: Notify Discord/Slack
        if: false # Enable when webhook is configured
        run: |
          # TODO: Send notification to Discord/Slack
          echo "Would send release notification here"
