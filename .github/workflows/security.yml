name: Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1" # Run every Monday at 2 AM

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: cpp # Rust is analyzed as C++
          queries: security-and-quality

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build for analysis
        run: cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit

      - name: Run cargo audit
        run: cargo audit --json --output audit-results.json
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json

      - name: Check for vulnerabilities
        run: |
          if cargo audit --deny warnings; then
            echo "✅ No security vulnerabilities found"
          else
            echo "❌ Security vulnerabilities detected"
            exit 1
          fi

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "## License Report" > license-report.md
          echo "| Crate | License | Repository |" >> license-report.md
          echo "|-------|---------|------------|" >> license-report.md
          cargo license --tsv | tail -n +2 | while IFS=$'\t' read -r crate license repo; do
            echo "| $crate | $license | $repo |" >> license-report.md
          done

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.md

      - name: Check for incompatible licenses
        run: |
          # Define allowed licenses (adjust as needed)
          ALLOWED_LICENSES="MIT|Apache-2.0|BSD-2-Clause|BSD-3-Clause|ISC|Unlicense"

          if cargo license --json | jq -r '.[].license' | grep -v -E "^($ALLOWED_LICENSES)$"; then
            echo "❌ Found incompatible licenses"
            exit 1
          else
            echo "✅ All licenses are compatible"
          fi

  # SBOM Generation
  sbom:
    name: Software Bill of Materials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-cyclonedx
        run: cargo install cargo-cyclonedx

      - name: Generate SBOM
        run: cargo cyclonedx --format json --output-file sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: sbom.json

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
