name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly dependency audit
    - cron: "0 0 * * 0"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Job 1: Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::all \
            -D clippy::pedantic \
            -A clippy::module_name_repetitions \
            -A clippy::struct_excessive_bools

      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Job 2: Testing Matrix
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, 1.70.0] # MSRV
        features: ["", "--all-features", "--no-default-features"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            desktop-file-utils \
            shared-mime-info \
            xdg-utils

      - name: Run tests
        run: cargo test --verbose ${{ matrix.features }}

      - name: Run doctests
        run: cargo test --doc ${{ matrix.features }}

  # Job 3: Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@cargo-tarpaulin

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            desktop-file-utils \
            shared-mime-info \
            xdg-utils

      - name: Generate code coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cobertura.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Job 4: Build Release Binary
  build:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-build-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Strip binary
        run: strip target/release/open-with

      - name: Run binary smoke test
        run: |
          ./target/release/open-with --version
          ./target/release/open-with --build-info
          ./target/release/open-with --help

      - name: Calculate binary size
        run: |
          SIZE=$(stat -c%s target/release/open-with)
          echo "Binary size: $SIZE bytes"
          echo "BINARY_SIZE=$SIZE" >> $GITHUB_ENV

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-with-linux-x86_64
          path: target/release/open-with
          retention-days: 30

  # Job 5: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            desktop-file-utils \
            shared-mime-info \
            xdg-utils \
            fzf \
            file

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: open-with-linux-x86_64
          path: ./

      - name: Make binary executable
        run: chmod +x open-with

      - name: Create test files
        run: |
          echo "Hello World" > test.txt
          echo '{"test": true}' > test.json

      - name: Test MIME type detection
        run: |
          ./open-with test.txt --json | jq '.mimetype' | grep -q "text/plain"
          ./open-with test.json --json | jq '.mimetype' | grep -q "application/json"

      - name: Test cache functionality
        run: |
          ./open-with test.txt --json > /dev/null
          ./open-with --clear-cache
          ./open-with test.txt --json > /dev/null

  # Job 6: Benchmark
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            desktop-file-utils \
            shared-mime-info \
            xdg-utils \
            hyperfine

      - name: Build release
        run: cargo build --release

      - name: Create test files
        run: |
          echo "Hello World" > test.txt
          seq 1 1000 > large.txt

      - name: Run performance benchmark
        run: |
          echo "## Performance Benchmark" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Time |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY

          # Benchmark startup time
          STARTUP_TIME=$(hyperfine --export-json /tmp/startup.json './target/release/open-with --version' | jq -r '.results[0].mean')
          echo "| Startup time | ${STARTUP_TIME}s |" >> $GITHUB_STEP_SUMMARY

          # Benchmark file processing
          PROCESS_TIME=$(hyperfine --export-json /tmp/process.json './target/release/open-with test.txt --json' | jq -r '.results[0].mean')
          echo "| File processing | ${PROCESS_TIME}s |" >> $GITHUB_STEP_SUMMARY

  # Job 7: Security Audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit

      - name: Run security audit
        run: cargo audit --deny warnings

      - name: Run cargo deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check
          arguments: --all-features

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, coverage, build, integration, audit]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.coverage.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.integration.result }}" != "success" ]] || \
             [[ "${{ needs.audit.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
